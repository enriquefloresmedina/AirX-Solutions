# Code generated by font_to_py.py.
# Font: Arial.ttf Char set: %CPakº
# Cmd: font_to_py.py Arial.ttf 15 arial15.py -x -c ºC%kPa
version = '0.33'
def height():
    return 15

def baseline():
    return 15

def max_width():
    return 18

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 37

def max_ch():
    return 186

_font =\
b'\x0b\x00\x1f\x00\x3f\x80\x71\xc0\x60\xc0\x00\xc0\x01\x80\x03\x80'\
b'\x07\x00\x0e\x00\x0c\x00\x0c\x00\x00\x00\x00\x00\x0c\x00\x0c\x00'\
b'\x12\x00\x1c\x0c\x00\x36\x18\x00\x63\x18\x00\x63\x30\x00\x63\x30'\
b'\x00\x63\x60\x00\x36\x60\x00\x1c\xce\x00\x00\xdb\x00\x01\xb1\x80'\
b'\x01\xb1\x80\x03\x31\x80\x03\x31\x80\x06\x1b\x00\x06\x0e\x00\x00'\
b'\x0b\x00\x1f\x00\x3f\x80\x71\xc0\x60\xc0\x00\xc0\x01\x80\x03\x80'\
b'\x07\x00\x0e\x00\x0c\x00\x0c\x00\x00\x00\x00\x00\x0c\x00\x0c\x00'\
b'\x0e\x00\x07\x80\x1f\xe0\x38\x70\x30\x38\x70\x18\x60\x00\x60\x00'\
b'\x60\x00\x60\x00\x60\x00\x70\x18\x30\x38\x38\x70\x1f\xe0\x07\x80'\
b'\x0d\x00\x3f\xc0\x3f\xe0\x30\x70\x30\x30\x30\x30\x30\x30\x30\x70'\
b'\x3f\xe0\x3f\xc0\x30\x00\x30\x00\x30\x00\x30\x00\x30\x00\x30\x00'\
b'\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x7f\x80\x61\x80'\
b'\x01\x80\x07\x80\x3f\x80\x79\x80\x61\x80\x63\x80\x7f\x80\x3c\xc0'\
b'\x0a\x00\x60\x00\x60\x00\x60\x00\x60\x00\x61\xc0\x63\x80\x67\x00'\
b'\x6e\x00\x7c\x00\x7e\x00\x66\x00\x67\x00\x63\x80\x61\x80\x61\xc0'\
b'\x07\x00\x38\x44\xc6\xc6\xc6\xc4\x38\x00\x00\x00\x00\x00\x00\x00'\
b'\x00'

_sparse =\
b'\x25\x00\x04\x00\x3f\x00\x0a\x00\x43\x00\x0e\x00\x50\x00\x12\x00'\
b'\x61\x00\x16\x00\x6b\x00\x1a\x00\xba\x00\x1e\x00'

_mvfont = memoryview(_font)
_mvsp = memoryview(_sparse)
ifb = lambda l : l[0] | (l[1] << 8)
def bs(lst, val):
    while True:
        m = (len(lst) & ~ 7) >> 1
        v = ifb(lst[m:])
        if v == val:
            return ifb(lst[m + 2:])
        if not m:
            return 0
        lst = lst[m:] if v < val else lst[:m]
def get_ch(ch):
    doff = bs(_mvsp, ord(ch)) << 3
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((width - 1)//8 + 1) * 15
    return _mvfont[doff + 2:next_offs], 15, width
 
